name: Deploy to ECS

on:
  push:
    branches: [main]        # Deploy only from main
  workflow_dispatch: {}     # Manual trigger option

permissions:
  id-token: write           # OIDC to AWS
  contents: read

concurrency:
  group: prod-deploy        # Prevent concurrent deploys
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  TASK_FAMILY: ${{ vars.TASK_FAMILY }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  PUBLIC_CHECK_URL: http://3.106.149.75/api/docs

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC) # Assume AWS role via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR # docker login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tags # short SHA and latest
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "image=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${SHA_TAG}" >> $GITHUB_OUTPUT
          echo "image_latest=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:latest" >> $GITHUB_OUTPUT

      - name: Build & Push images # to ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.meta.outputs.image }}
            ${{ steps.meta.outputs.image_latest }}

      - name: Read current task def revision # for rollback
        id: current
        run: |
          ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" \
            --query 'services[0].taskDefinition' --output text)
          echo "current_td_arn=$ARN" >> $GITHUB_OUTPUT

      - name: Render taskdef (swap image) # update container image
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/ecs/task-def.template.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.meta.outputs.image }}

      - name: Deploy to ECS # rolling update
        id: ecs-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Smoke test # quick health check
        id: smoke
        run: curl -sSf -m 20 "${PUBLIC_CHECK_URL}" > /dev/null

      - name: Rollback # if deploy/smoke failed
        if: failure() && steps.current.outputs.current_td_arn != ''
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "${{ steps.current.outputs.current_td_arn }}" \
            --region "$AWS_REGION"
          aws ecs wait services-stable \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "$AWS_REGION"
